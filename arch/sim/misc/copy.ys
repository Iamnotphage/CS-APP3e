# Execution begins at address 0
        .pos 0
        irmovq stack, %rsp
        call main
        halt

        .align 8
# Source block
src:
        .quad 0x00a
        .quad 0x0b0
        .quad 0xc00
# Destination block
dest:
        .quad 0x111
        .quad 0x222
        .quad 0x333

main:
        irmovq  src, %rdi
        irmovq  dest, %rsi
        irmovq  $3, %rdx
        call    copy_block
        ret

# long copy_block(long *src, long *dest, long len)
# src in %rdi, dest in %rsi, len in %rdx
copy_block:
        irmovq  $8, %r9
        irmovq  $-1, %r10
        xorq    %rax, %rax

loop:
        andq    %rdx, %rdx
        je      exit

        mrmovq  (%rdi), %r8     # %r8 is val
        addq    %r9, %rdi
        rmmovq  %r8, (%rsi)
        addq    %r9, %rsi
        xorq    %r8, %rax
        addq    %r10, %rdx
        jmp     loop
exit:
        ret

# Stack starts here and grows to lower addresses
	    .pos 0x200
stack:
